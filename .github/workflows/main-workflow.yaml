name: Main workflow
on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - '.metadata'
      - 'README.md'
      - '.github/**'
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  contents: write

jobs:
  get_version:
    name: Retrieve version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.split.outputs._0 }}
    steps:
      - uses: actions/checkout@v3
      - name: Get the version from the pubspec
        id: pubspecVersion
        uses: CumulusDS/get-yaml-paths-action@v0.1.1
        with:
          file: pubspec.yaml
          version: version
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: ${{ steps.pubspecVersion.outputs.version }}
          separator: '+'

  tests:
    name: Tests & checks
    runs-on: ubuntu-latest
    steps:
      #### SETUP ####
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - run: flutter doctor
      - name: Get dependencies
        run: flutter pub get
      - name: Generate files
        run: flutter pub run build_runner build

      ### CHECKS ###
      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test --coverage

  build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    needs:
      - tests
      - get_version
    environment: beta
    env:
      VERSION: ${{ needs.get_version.outputs.version }}
      FLAVOR: prod
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        target:
          - iOS
          - Android
        include:
          - target: iOS
            os: macos-latest
            build_target: ios
            build_args: --no-codesign
            build_path: build/ios/iphoneos
            asset_extension: zip
            asset_content_type: application/zip
          - target: Android
            os: ubuntu-latest
            build_target: apk
            build_args: ''
            build_path: build/app/outputs/flutter-apk
            asset_extension: apk
            asset_content_type: application/zip
    steps:
      #### SETUP ####
      - uses: actions/checkout@v3
      - name: Install Android dependencies
        if: matrix.target == 'Android'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - run: flutter doctor
      - name: Install Firebase dependencies
        run: |
          npm install -g firebase-tools
          dart pub global activate flutterfire_cli
      - name: Generate Firebase files
        run: |
          flutterfire configure --project=${{ vars.FIREBASE_PROJECT_ID }} --yes \
              --token=${{ secrets.FIREBASE_TOKEN }} \
              --out=lib/firebase_options.dart \
              --platforms=${{ matrix.target }} \
              ${{ matrix.target == 'Android' && format('--android-package-name={0}', vars.ANDROID_PACKAGE_NAME) || '' }} \
              ${{ matrix.target == 'iOS' && format('--ios-bundle-id={0}', vars.IOS_BUNDLE_ID) || '' }}
      - name: Get dependencies
        run: flutter pub get
      - name: Generate files
        run: flutter pub run build_runner build

      #### BUILD ####
      - name: Build the application
        run: flutter build -v ${{ matrix.build_target }} ${{ matrix.build_args }} --flavor ${{ env.FLAVOR }} --release

      #### COMPRESS & UPLOAD ####
      - name: Rename Android build
        if: matrix.target == 'Android'
        run: |
          mv app-prod-release.${{ matrix.asset_extension }} ${{ github.workspace }}/${{ vars.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}.${{ matrix.asset_extension }}
        working-directory: ${{ matrix.build_path }}

      - name: Compress iOS build
        if: matrix.target == 'iOS'
        run: |
          ditto -c -k --sequesterRsrc --keepParent ${{ vars.APP_NAME }}.app ${{ github.workspace }}/${{ vars.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}.${{ matrix.asset_extension }}
        working-directory: ${{ matrix.build_path }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ github.workspace }}/${{ vars.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}.${{ matrix.asset_extension }}
  create_pre_release:
    name: Create GitHub release
    needs:
      - get_version
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download build of Android and iOS
        uses: actions/download-artifact@v3
        with:
          path: build
      - name: Create pre-release
        run: |
          gh release create ${{ needs.get_version.outputs.version }} */** --title v${{ needs.get_version.outputs.version }} -R '${{ github.repository }}' --prerelease --generate-notes
        working-directory: build
