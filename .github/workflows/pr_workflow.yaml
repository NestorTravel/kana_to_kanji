name: Build, format, lint and test the application
on:
  pull_request:
    paths-ignore:
      - '.gitignore'
      - '.metadata'
      - 'README.md'
#      - '.github/**'
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
permissions:
  pull-requests: write
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
#  bump_version:
#    name: Bump version
#    runs-on: ubuntu-latest
#    if: github.event.pull_request.base.ref == 'main'
#    outputs:
#      stop: ${{ steps.bump.outputs.has_changed }}
#      version: ${{ steps.bump.outputs.version }}
#    steps:
#      - uses: actions/checkout@v3
#      - name: Bump version using labels
#        id: bump
#        uses: apomalyn/bump-version-using-labels@v1.5.0
#        with:
#          file_path: 'pubspec.yaml'
#          reference_branch: 'main'
  tests:
    name: Run the tests and checks
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
    steps:
      #### SETUP ####
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - run: flutter doctor
      - name: Get dependencies
        run: flutter pub get
      - name: Generate files
        run: flutter pub run build_runner build

      ### CHECKS ###
      # Check the format of the code and commit the formatted files.
      - name: Format files in lib and test directories
        run: dart format lib test
      - name: Commit formatted files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: "*.dart"
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com
          commit_message: "[BOT] Applying format."
          add_options: '-u'

      # Check if the code has any errors/warnings
      - name: Analyze code
        run: flutter analyze

      # Run tests
      - name: Run tests
        run: flutter test --coverage
      - name: Comment the coverage of the PR
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          filter-changed-files: true
  build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    needs:
      - tests
    environment: dev
    env:
      VERSION: ${{ github.event.pull_request.number }}
      FLAVOR: dev
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        target:
          - ios
          - android
        include:
          - target: ios
            os: macos-latest
            build_target: ios
            build_args: --no-codesign
            build_path: build/ios/iphoneos
            asset_extension: zip
            asset_content_type: application/zip
          - target: android
            os: ubuntu-latest
            build_target: apk
            build_args: --split-per-abi
            build_path: build/app/outputs/flutter-apk
            asset_extension: apk
            asset_content_type: application/zip
    steps:
      #### SETUP ####
      - uses: actions/checkout@v3
      - name: Install Android dependencies
        if: matrix.target == 'Android'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - run: flutter doctor
      - name: Install Firebase dependencies
        run: |
          npm install -g firebase-tools 
          dart pub global activate flutterfire_cli
      - name: Generate Firebase files
        run: |
          flutterfire configure --project=${{ vars.FIREBASE_PROJECT_ID }} --yes \
              --token=${{ secrets.FIREBASE_TOKEN }} \
              --out=lib/firebase_options.dart \
              --platforms=${{ matrix.target }} \
              ${{ matrix.target == 'Android' && format('--android-package-name={0}', vars.ANDROID_PACKAGE_NAME) || '' }} \
              ${{ matrix.target == 'iOS' && format('--ios-bundle-id={0}', vars.IOS_BUNDLE_ID) || '' }}

      - name: Get dependencies
        run: flutter pub get
      - name: Generate files
        run: flutter pub run build_runner build

      #### BUILD ####
      - name: Build the application
        run: flutter build -v ${{ matrix.build_target }} ${{ matrix.build_args }} --flavor ${{ env.FLAVOR }} --release

      #### COMPRESS & UPLOAD ####
      - name: Rename Android build
        if: matrix.target == 'Android'
        run: |
          sudo apt-get install rename
          rename 's/app-(.+)-(.*)-release/${{ vars.APP_NAME }}_${{ env.VERSION }}_$2_${{ matrix.target }}_$1/' *.apk
          mv *.apk ${{ github.workspace }}/
        working-directory: ${{ matrix.build_path }}

      - name: Compress iOS build
        if: matrix.target == 'iOS'
        run: |
          ditto -c -k --sequesterRsrc --keepParent ${{ vars.DEV_APP_NAME }}.app ${{ github.workspace }}/${{ vars.APP_NAME }}_${{ env.VERSION }}_${{ env.FLAVOR }}_${{ matrix.target }}.${{ matrix.asset_extension }}
        working-directory: ${{ matrix.build_path }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ github.workspace }}/${{ vars.APP_NAME }}_${{ env.VERSION }}_${{ env.FLAVOR }}_${{ matrix.target }}*.${{ matrix.asset_extension }}
  tmp:
    name: Test
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download build of Android and iOS
        uses: actions/download-artifact@v3
        with:
          path: build
      - name: List directory content
        run: |
          ls -ali */**
        working-directory: build