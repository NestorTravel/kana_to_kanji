name: Build, format, lint and test the application
on:
  pull_request:
    paths-ignore:
      - '.gitignore'
      - '.metadata'
      - 'README.md'
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  bump_version:
    name: Bump version
    runs-on: ubuntu-latest
    outputs:
      stop: ${{ steps.bump.outputs.has_changed }}
      version: ${{ steps.bump.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Bump version using labels
        id: bump
        uses: apomalyn/bump-version-using-labels@v1.5.0
        with:
          file_path: 'pubspec.yaml'
          reference_branch: 'main'
  tests:
    name: Run the tests and checks
    runs-on: ubuntu-latest
    needs:
      - bump_version
    if: needs.bump_version.outputs.stop == 'false'
    outputs:
      coverage: ${{ steps.coverage.outputs.percentage }}
    steps:
      #### SETUP ####
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - run: flutter doctor
      - name: Get dependencies
        run: flutter pub get
      - name: Generate files
        run: flutter pub run build_runner build

      ### CHECKS ###
      # Check the format of the code and commit the formatted files.
      - name: Format files in lib and test directories
        run: flutter format lib test
      - name: Commit formatted files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: "*.dart"
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com
          commit_message: "[BOT] Applying format."
          add_options: '-u'

      # Check if the code has any errors/warnings
      - name: Analyze code
        run: flutter analyze

      # Run tests
      - name: Run tests
        run: flutter test --coverage
      - name: Comment the coverage of the PR
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
  build:
    name: Create ${{ matrix.target }} build
    runs-on: ${{ matrix.os }}
    needs:
      - tests
      - bump_version
    if: needs.bump_version.outputs.stop == 'false'
    env:
      VERSION: ${{ needs.bump_version.outputs.version }}
    strategy:
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
      matrix:
        target:
          - iOS
          - Android
        include:
          - target: iOS
            os: macos-latest
            build_target: ios
            build_args: --no-codesign
            build_path: build/ios/iphoneos
            asset_extension: zip
            asset_content_type: application/zip
          - target: Android
            os: ubuntu-latest
            build_target: apk
            build_args: ''
            build_path: build/app/outputs/apk/release
            asset_extension: apk
            asset_content_type: application/zip
    steps:
      #### SETUP ####
      - uses: actions/checkout@v3
      - name: Install Android dependencies
        if: matrix.target == 'Android'
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - run: flutter doctor
      - name: Get dependencies
        run: flutter pub get
      - name: Generate files
        run: flutter pub run build_runner build

      #### BUILD ####
      - name: Build the application
        run: flutter build -v ${{ matrix.build_target }} ${{ matrix.build_args }} --release

      #### COMPRESS & UPLOAD ####
      - name: Rename Android build
        if: matrix.target == 'Android'
        run: |
          mv app-release.${{ matrix.asset_extension }} ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}.${{ matrix.asset_extension }}
        working-directory: ${{ matrix.build_path }}

      - name: Compress iOS build
        if: matrix.target == 'iOS'
        run: |
          mv Runner.app ${{ env.APP_NAME }}.app
          ditto -c -k --sequesterRsrc --keepParent ${{ env.APP_NAME }}.app ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}.${{ matrix.asset_extension }}
        working-directory: ${{ matrix.build_path }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.VERSION }}_${{ matrix.target }}.${{ matrix.asset_extension }}